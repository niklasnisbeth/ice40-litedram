//--------------------------------------------------------------------------------
// Auto-generated by Migen (bee558c) & LiteX (ffa7ca8f) on 2019-12-30 14:39:17
//--------------------------------------------------------------------------------
#include <generated/soc.h>
#ifndef __GENERATED_CSR_H
#define __GENERATED_CSR_H
#include <stdint.h>
#ifdef CSR_ACCESSORS_DEFINED
extern void csr_writeb(uint8_t value, unsigned long addr);
extern uint8_t csr_readb(unsigned long addr);
extern void csr_writew(uint16_t value, unsigned long addr);
extern uint16_t csr_readw(unsigned long addr);
extern void csr_writel(uint32_t value, unsigned long addr);
extern uint32_t csr_readl(unsigned long addr);
#else /* ! CSR_ACCESSORS_DEFINED */
#include <hw/common.h>
#endif /* ! CSR_ACCESSORS_DEFINED */

/* ctrl */
#define CSR_CTRL_BASE 0x82000000L
#define CSR_CTRL_RESET_ADDR 0x82000000L
#define CSR_CTRL_RESET_SIZE 1
static inline unsigned char ctrl_reset_read(void) {
	unsigned char r = csr_readl(0x82000000L);
	return r;
}
static inline void ctrl_reset_write(unsigned char value) {
	csr_writel(value, 0x82000000L);
}
#define CSR_CTRL_SCRATCH_ADDR 0x82000004L
#define CSR_CTRL_SCRATCH_SIZE 4
static inline unsigned int ctrl_scratch_read(void) {
	unsigned int r = csr_readl(0x82000004L);
	r <<= 8;
	r |= csr_readl(0x82000008L);
	r <<= 8;
	r |= csr_readl(0x8200000cL);
	r <<= 8;
	r |= csr_readl(0x82000010L);
	return r;
}
static inline void ctrl_scratch_write(unsigned int value) {
	csr_writel(value >> 24, 0x82000004L);
	csr_writel(value >> 16, 0x82000008L);
	csr_writel(value >> 8, 0x8200000cL);
	csr_writel(value, 0x82000010L);
}
#define CSR_CTRL_BUS_ERRORS_ADDR 0x82000014L
#define CSR_CTRL_BUS_ERRORS_SIZE 4
static inline unsigned int ctrl_bus_errors_read(void) {
	unsigned int r = csr_readl(0x82000014L);
	r <<= 8;
	r |= csr_readl(0x82000018L);
	r <<= 8;
	r |= csr_readl(0x8200001cL);
	r <<= 8;
	r |= csr_readl(0x82000020L);
	return r;
}

/* uart */
#define CSR_UART_BASE 0x82001000L
#define CSR_UART_RXTX_ADDR 0x82001000L
#define CSR_UART_RXTX_SIZE 1
static inline unsigned char uart_rxtx_read(void) {
	unsigned char r = csr_readl(0x82001000L);
	return r;
}
static inline void uart_rxtx_write(unsigned char value) {
	csr_writel(value, 0x82001000L);
}
#define CSR_UART_TXFULL_ADDR 0x82001004L
#define CSR_UART_TXFULL_SIZE 1
static inline unsigned char uart_txfull_read(void) {
	unsigned char r = csr_readl(0x82001004L);
	return r;
}
#define CSR_UART_RXEMPTY_ADDR 0x82001008L
#define CSR_UART_RXEMPTY_SIZE 1
static inline unsigned char uart_rxempty_read(void) {
	unsigned char r = csr_readl(0x82001008L);
	return r;
}
#define CSR_UART_EV_STATUS_ADDR 0x8200100cL
#define CSR_UART_EV_STATUS_SIZE 1
static inline unsigned char uart_ev_status_read(void) {
	unsigned char r = csr_readl(0x8200100cL);
	return r;
}
static inline void uart_ev_status_write(unsigned char value) {
	csr_writel(value, 0x8200100cL);
}
#define CSR_UART_EV_PENDING_ADDR 0x82001010L
#define CSR_UART_EV_PENDING_SIZE 1
static inline unsigned char uart_ev_pending_read(void) {
	unsigned char r = csr_readl(0x82001010L);
	return r;
}
static inline void uart_ev_pending_write(unsigned char value) {
	csr_writel(value, 0x82001010L);
}
#define CSR_UART_EV_ENABLE_ADDR 0x82001014L
#define CSR_UART_EV_ENABLE_SIZE 1
static inline unsigned char uart_ev_enable_read(void) {
	unsigned char r = csr_readl(0x82001014L);
	return r;
}
static inline void uart_ev_enable_write(unsigned char value) {
	csr_writel(value, 0x82001014L);
}

/* timer0 */
#define CSR_TIMER0_BASE 0x82001800L
#define CSR_TIMER0_LOAD_ADDR 0x82001800L
#define CSR_TIMER0_LOAD_SIZE 4
static inline unsigned int timer0_load_read(void) {
	unsigned int r = csr_readl(0x82001800L);
	r <<= 8;
	r |= csr_readl(0x82001804L);
	r <<= 8;
	r |= csr_readl(0x82001808L);
	r <<= 8;
	r |= csr_readl(0x8200180cL);
	return r;
}
static inline void timer0_load_write(unsigned int value) {
	csr_writel(value >> 24, 0x82001800L);
	csr_writel(value >> 16, 0x82001804L);
	csr_writel(value >> 8, 0x82001808L);
	csr_writel(value, 0x8200180cL);
}
#define CSR_TIMER0_RELOAD_ADDR 0x82001810L
#define CSR_TIMER0_RELOAD_SIZE 4
static inline unsigned int timer0_reload_read(void) {
	unsigned int r = csr_readl(0x82001810L);
	r <<= 8;
	r |= csr_readl(0x82001814L);
	r <<= 8;
	r |= csr_readl(0x82001818L);
	r <<= 8;
	r |= csr_readl(0x8200181cL);
	return r;
}
static inline void timer0_reload_write(unsigned int value) {
	csr_writel(value >> 24, 0x82001810L);
	csr_writel(value >> 16, 0x82001814L);
	csr_writel(value >> 8, 0x82001818L);
	csr_writel(value, 0x8200181cL);
}
#define CSR_TIMER0_EN_ADDR 0x82001820L
#define CSR_TIMER0_EN_SIZE 1
static inline unsigned char timer0_en_read(void) {
	unsigned char r = csr_readl(0x82001820L);
	return r;
}
static inline void timer0_en_write(unsigned char value) {
	csr_writel(value, 0x82001820L);
}
#define CSR_TIMER0_UPDATE_VALUE_ADDR 0x82001824L
#define CSR_TIMER0_UPDATE_VALUE_SIZE 1
static inline unsigned char timer0_update_value_read(void) {
	unsigned char r = csr_readl(0x82001824L);
	return r;
}
static inline void timer0_update_value_write(unsigned char value) {
	csr_writel(value, 0x82001824L);
}
#define CSR_TIMER0_VALUE_ADDR 0x82001828L
#define CSR_TIMER0_VALUE_SIZE 4
static inline unsigned int timer0_value_read(void) {
	unsigned int r = csr_readl(0x82001828L);
	r <<= 8;
	r |= csr_readl(0x8200182cL);
	r <<= 8;
	r |= csr_readl(0x82001830L);
	r <<= 8;
	r |= csr_readl(0x82001834L);
	return r;
}
#define CSR_TIMER0_EV_STATUS_ADDR 0x82001838L
#define CSR_TIMER0_EV_STATUS_SIZE 1
static inline unsigned char timer0_ev_status_read(void) {
	unsigned char r = csr_readl(0x82001838L);
	return r;
}
static inline void timer0_ev_status_write(unsigned char value) {
	csr_writel(value, 0x82001838L);
}
#define CSR_TIMER0_EV_PENDING_ADDR 0x8200183cL
#define CSR_TIMER0_EV_PENDING_SIZE 1
static inline unsigned char timer0_ev_pending_read(void) {
	unsigned char r = csr_readl(0x8200183cL);
	return r;
}
static inline void timer0_ev_pending_write(unsigned char value) {
	csr_writel(value, 0x8200183cL);
}
#define CSR_TIMER0_EV_ENABLE_ADDR 0x82001840L
#define CSR_TIMER0_EV_ENABLE_SIZE 1
static inline unsigned char timer0_ev_enable_read(void) {
	unsigned char r = csr_readl(0x82001840L);
	return r;
}
static inline void timer0_ev_enable_write(unsigned char value) {
	csr_writel(value, 0x82001840L);
}

/* sdram */
#define CSR_SDRAM_BASE 0x82004000L
#define CSR_SDRAM_DFII_CONTROL_ADDR 0x82004000L
#define CSR_SDRAM_DFII_CONTROL_SIZE 1
static inline unsigned char sdram_dfii_control_read(void) {
	unsigned char r = csr_readl(0x82004000L);
	return r;
}
static inline void sdram_dfii_control_write(unsigned char value) {
	csr_writel(value, 0x82004000L);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_ADDR 0x82004004L
#define CSR_SDRAM_DFII_PI0_COMMAND_SIZE 1
static inline unsigned char sdram_dfii_pi0_command_read(void) {
	unsigned char r = csr_readl(0x82004004L);
	return r;
}
static inline void sdram_dfii_pi0_command_write(unsigned char value) {
	csr_writel(value, 0x82004004L);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_ISSUE_ADDR 0x82004008L
#define CSR_SDRAM_DFII_PI0_COMMAND_ISSUE_SIZE 1
static inline unsigned char sdram_dfii_pi0_command_issue_read(void) {
	unsigned char r = csr_readl(0x82004008L);
	return r;
}
static inline void sdram_dfii_pi0_command_issue_write(unsigned char value) {
	csr_writel(value, 0x82004008L);
}
#define CSR_SDRAM_DFII_PI0_ADDRESS_ADDR 0x8200400cL
#define CSR_SDRAM_DFII_PI0_ADDRESS_SIZE 2
static inline unsigned short int sdram_dfii_pi0_address_read(void) {
	unsigned short int r = csr_readl(0x8200400cL);
	r <<= 8;
	r |= csr_readl(0x82004010L);
	return r;
}
static inline void sdram_dfii_pi0_address_write(unsigned short int value) {
	csr_writel(value >> 8, 0x8200400cL);
	csr_writel(value, 0x82004010L);
}
#define CSR_SDRAM_DFII_PI0_BADDRESS_ADDR 0x82004014L
#define CSR_SDRAM_DFII_PI0_BADDRESS_SIZE 1
static inline unsigned char sdram_dfii_pi0_baddress_read(void) {
	unsigned char r = csr_readl(0x82004014L);
	return r;
}
static inline void sdram_dfii_pi0_baddress_write(unsigned char value) {
	csr_writel(value, 0x82004014L);
}
#define CSR_SDRAM_DFII_PI0_WRDATA_ADDR 0x82004018L
#define CSR_SDRAM_DFII_PI0_WRDATA_SIZE 2
static inline unsigned short int sdram_dfii_pi0_wrdata_read(void) {
	unsigned short int r = csr_readl(0x82004018L);
	r <<= 8;
	r |= csr_readl(0x8200401cL);
	return r;
}
static inline void sdram_dfii_pi0_wrdata_write(unsigned short int value) {
	csr_writel(value >> 8, 0x82004018L);
	csr_writel(value, 0x8200401cL);
}
#define CSR_SDRAM_DFII_PI0_RDDATA_ADDR 0x82004020L
#define CSR_SDRAM_DFII_PI0_RDDATA_SIZE 2
static inline unsigned short int sdram_dfii_pi0_rddata_read(void) {
	unsigned short int r = csr_readl(0x82004020L);
	r <<= 8;
	r |= csr_readl(0x82004024L);
	return r;
}

/* spiflash */
#define CSR_SPIFLASH_BASE 0x82005000L
#define CSR_SPIFLASH_BITBANG_ADDR 0x82005000L
#define CSR_SPIFLASH_BITBANG_SIZE 1
static inline unsigned char spiflash_bitbang_read(void) {
	unsigned char r = csr_readl(0x82005000L);
	return r;
}
static inline void spiflash_bitbang_write(unsigned char value) {
	csr_writel(value, 0x82005000L);
}
#define CSR_SPIFLASH_MISO_ADDR 0x82005004L
#define CSR_SPIFLASH_MISO_SIZE 1
static inline unsigned char spiflash_miso_read(void) {
	unsigned char r = csr_readl(0x82005004L);
	return r;
}
#define CSR_SPIFLASH_BITBANG_EN_ADDR 0x82005008L
#define CSR_SPIFLASH_BITBANG_EN_SIZE 1
static inline unsigned char spiflash_bitbang_en_read(void) {
	unsigned char r = csr_readl(0x82005008L);
	return r;
}
static inline void spiflash_bitbang_en_write(unsigned char value) {
	csr_writel(value, 0x82005008L);
}

#endif
